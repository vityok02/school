@page "/schools"

@using SchoolManagement.Client.Features.Schools.Dtos
@using SchoolManagement.Client.Pagination
@inject NavigationManager NavManager
@inject ISchoolService SchoolService
@* @rendermode RenderMode.InteractiveServer *@

<PageTitle>Schools</PageTitle>

<h3>Schools</h3>

<NavLink href="schools/create">Add school</NavLink>

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Country</th>
            <th>City</th>
            <th>Street</th>
            <th>Postal code</th>
            <th>Opening date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var item in list.Items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Country</td>
                <td>@item.City</td>
                <td>@item.Street</td>
                <td>@item.PostalCode</td>
                <td>@item.OpeningDate.ToShortDateString()</td>
                <td>
                    <a href="/schools/@item.Id">View</a>
                    <button type="submit" @onclick="@(() => DeleteSchool(@item.Id))">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<Pagination Uri="/schools" Result=@list PageSizeChanged="UpdatePageSize" />

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? SortColumn { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? SortOrder { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    PagedList<School> list = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (list is null)
        {
            list = new();
            list.Page = Page ?? 1;
            list.PageSize = 10;
        }

        await LoadData();
    }

    private async Task DeleteSchool(int id)
    {
        await SchoolService.DeleteSchool(id);
        await LoadData();
    }

    private async Task LoadData()
    {
        list = await SchoolService.GetSchools(SearchTerm, SortColumn, SortOrder, list.Page, list.PageSize);
    }

    private void UpdatePageSize(int pageSize)
    {
        list.PageSize = pageSize;
        list.Page = 1;
        NavManager.Refresh();
    }
}
