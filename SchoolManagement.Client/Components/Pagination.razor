@using SchoolManagement.Client.Pagination

<div class="pagination">
    <a href="@firstPage" class="@(Result.HasPreviousPage ? "" : "disabled")">&laquo;</a>
    <a href="@prevPage" class="@(Result.HasPreviousPage ? "" : "disabled")">&lt;</a>
    <a href="@nextPage" class="@(Result.HasNextPage ? "" : "disabled")">&gt;</a>
    <a href="@lastPage" class="@(Result.HasNextPage ? "" : "disabled")">&raquo;</a>
    <InputSelect @bind-Value="Result.PageSize" @onchange="(() => UpdatePageSize(Result.PageSize))">
        @foreach (var pageSize in pageSizes)
        {
            <option value="@pageSize">@pageSize</option>
        }
    </InputSelect>
    <h2>@Result.PageSize</h2>
</div>

@code {
    [Parameter]
    public string Uri { get; set; } = "";
    [Parameter]
    public BasePagedList Result { get; set; } = default!;
    [Parameter]
    public Action<int> PageSizeChanged { get; set; }

    string firstPage => $"{Uri}?page=1";
    string prevPage = "";
    string nextPage = "";
    string lastPage => $"{Uri}?page={Result.PageCount}";

    int[] pageSizes = { 10, 20, 30, 40, 50 };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        UpdatePaginationLinks();
    }

    private void UpdatePaginationLinks()
    {
        prevPage = Result.Page - 1 < 1 ? BuildUri(Result.Page) : BuildUri(Result.Page - 1);
        nextPage = Result.Page + 1 > Result.PageCount ? BuildUri(Result.Page) : BuildUri(Result.Page + 1);
    }

    private string BuildUri(int page)
    {
        return $"{Uri}?page={page}";
    }

    private void UpdatePageSize(int pageSize)
    {
        PageSizeChanged?.Invoke(pageSize);
    }
}
